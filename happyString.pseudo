/* 
Problem statement:
We are creating a pseudocode solution to find the kth lexicographical happy string of length n. A happyString uses only 'a', 'b' and 'c' abd has no consecutive identical character.
*/

function generateHappyStrings(n, currentSting, resultList)
    // check if currentString has reached length n, if it has
    // we finalize this combination by adding it to the resultList and then
    // return to stop deeper exploration
    if length(currentString) = n then
        append currentString to resultList
        return
    end if
    
    // We have three possible letters: 'a', 'b' and 'c'. We try each one
    // as long as it doesn't match the last character of currentString
    for each letter in ['a','b','c'] do
        // if currentString is empty or the last char is not letter,
        // if it is valid to append letter. This prevents consecutive
        // identical characters
        if currentString = "" or right(currentString, 1) != letter then
        // build a new string by appending letter and recurse
        // deeper to fill the next position
        generateHappyStrings (n, currentString + letter, resultList)
        end if
    next letter
end function

function kthHappyString(n, k)
    // we create an empty list to store all happy strings that are
    // generated by our recursive function
    set happyStrings to []

    // begin the backtracking approach with an empty string, each valid
    // combination is appended to happyStrings.
    generateHappyStrings(n, "", happyStrings)

    // after generating all valid combos, we sort them lexicographically
    // to ensure correct ordering for the kth selection
    sort happyStrings in ascending order

    // if k is greater than the total number of happy strings, we
    // return an empty string since we cannot pick the kth item
    if k > length(happyStrings) then
        return ""
    else
        // assuming 1-indexing: the kth item in a 1-based sense is at
        // position k in the sorted list. if 0-based indexing is used
        // we would pick happyStrings [k-1]
        return happyStrings[k]
    end if
end function

// main execution block:
begin
// define our input values: n is the length of the happyString,
// k is the position in the sorted list we want to retrieve
set n to 3
set k to 4

// call kthHappyString to obtain the kth lexicographical happy string
// among all valid combos of length n.
set result to kthHappyString(n, k)

// output the result so we can see if everything is working as
// intended if k was too large, result should be an empty string
output "the " + k + "th happy string of length " + n + " is: "+ result
end
